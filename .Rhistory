param.nodesize <- c(3,5,7)
param.maxnodes <- c(0,10,100)
param <- expand.grid(param.mtry,param.nodesize,param.maxnodes)
param <- split(param,1:nrow(param))
trainSets <- caret::groupKFold(group = data$country,k = 39)
testSets <- lapply(trainSets,function(trainSet){testSet <- setdiff(1:nrow(data),trainSet)})
xtest <- lapply(testSets,function(testSet){dat <- data[testSet,-c(1,11)]})
xtrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,-c(1,11)]})
ytest <- lapply(testSets,function(testSet){dat <- data[testSet,11]})
ytrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,11]})
#
#       res <- randomForest::randomForest(x = xtrain[[i]],y = ytrain[[i]],
#                                         xtest = xtest[[i]],ytest = ytest[[i]],
#                                         mtry = mtry,nodesize = nodesize,maxnodes = maxnodes,
#                                         keep.forest = TRUE,ntree = 100)
#
#     })
#     assign(paste0('rf_',i),rf,pos = .GlobalEnv)
#   }
#   })
system.time({
coreNum <- parallel::detectCores()
clust <- parallel::makeCluster(coreNum-1)
clusterExport(cl = clust,varlist = c("xtest","xtrain","ytest","ytrain","param"))
for (i in 1:length(trainSets)){
clusterExport(cl = clust,varlist = c("i"))
xte <- xtest[[i]]
xtr <- xtrain[[i]]
yte <- ytest[[i]]
ytr <- ytrain[[i]]
rf <- parLapply(cl = clust,X = param,function(p){
mtry <- p[1,1]
nodesize <- p[1,2]
if (p[1,3] == 0){maxnodes <- NULL}
else{maxnodes <- p[1,3]}
res <- randomForest::randomForest(x = xtrain[[i]],y = ytrain[[i]],
xtest = xtest[[i]],ytest = ytest[[i]],
mtry = mtry,nodesize = nodesize,maxnodes = maxnodes,
keep.forest = TRUE,ntree = 500)
})
assign(paste0('rf_',i),rf,pos = .GlobalEnv)
}
})
View(rf)
# })
# trainSets <- caret::groupKFold(group = data$country,k = 15)
# rf <- lapply(trainSets,function(trainSet){
#   test <- data[-trainSet,]
#   train <- data[trainSet,]
#   res <- randomForest::randomForest(x = train[,-c(1,ncol(train))],y = train[,ncol(train)],
#                                     ntree = 10,keep.forest = TRUE)
#   return(res)
#
# })
cvPredByParam <- vector('list',nrow(param))
# })
# trainSets <- caret::groupKFold(group = data$country,k = 15)
# rf <- lapply(trainSets,function(trainSet){
#   test <- data[-trainSet,]
#   train <- data[trainSet,]
#   res <- randomForest::randomForest(x = train[,-c(1,ncol(train))],y = train[,ncol(train)],
#                                     ntree = 10,keep.forest = TRUE)
#   return(res)
#
# })
cvPredByParam <- vector('list',length = nrow(param))
# })
# trainSets <- caret::groupKFold(group = data$country,k = 15)
# rf <- lapply(trainSets,function(trainSet){
#   test <- data[-trainSet,]
#   train <- data[trainSet,]
#   res <- randomForest::randomForest(x = train[,-c(1,ncol(train))],y = train[,ncol(train)],
#                                     ntree = 10,keep.forest = TRUE)
#   return(res)
#
# })
cvPredByParam <- vector('list',length = length(param))
View(rf)
View(rf_1)
View(ytest)
View(testSets)
samples <- 1:nrow(data)
prediction <- data[,ncol(data)]
prediction <- data.frame(data[,ncol(data)],row.names = samples)
View(prediction)
predictionDf <- data.frame(data[,ncol(data)],row.names = samples)
testSets[[1]]
test <- parse(paste0("rf_1"))
test <- eval(parse(paste0("rf_1")))
paste0("rf_1")
test <- Sys.getenv(x = "rf_1")
test <- Sys.getenv(x = 'rf_1')
test <- as.name('rf_1')
test2 <- test2
test2 <- test
test <- eval(parse(text = "rf_1"))
i = 1
ii = 1
#for (i in 1:length(cvPredByParam)){
#  for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = "rf_1"))[['predicted']]
predicted <- eval(parse(text = "rf_1"))[[i]][['predicted']]
predicted <- eval(parse(text = "rf_1"))[[i]][['test']]
View(predicted)
predicted <- eval(parse(text = "rf_1"))[[i]][['test']][['predicted']]
if (ii ==1){
temp <- data.frame(predicted,row.names = testSamples)
}
View(temp)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
}
ii = 2
#for (i in 1:length(cvPredByParam)){
#  for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
}
View(temp2)
ii = 3
#for (i in 1:length(cvPredByParam)){
#  for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
}
View(temp2)
ii = 1
#for (i in 1:length(cvPredByParam)){
#  for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
}
ii = 2
#for (i in 1:length(cvPredByParam)){
#  for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
}
View(temp2)
ii = 3
#for (i in 1:length(cvPredByParam)){
#  for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
}
View(temp2)
seq(length(testSets))
i = 1
#for (i in 1:length(cvPredByParam)){
for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
}
}
temp3 <-  merge.data.frame(predictionDf,temp,by = 0,all = TRUE)
row.names(temp3) <- temp3$Row.names
colnames(temp3) <- c('copd',paste0("pred_Fold_",seq(length(testSets))))
View(temp3)
#for (i in 1:length(cvPredByParam)){
for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
}
}
temp3 <-  merge.data.frame(predictionDf,temp2,by = 0,all = TRUE)
View(temp3)
row.names(temp3) <- temp3$Row.names
temp3 <- temp3[,-1]
colnames(temp3) <- c('copd',paste0("pred_Fold_",seq(length(testSets))))
View(temp3)
View(cvPredByParam)
for (i in 1:length(cvPredByParam)){
for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
}
}
temp3 <-  merge.data.frame(predictionDf,temp2,by = 0,all = TRUE)
row.names(temp3) <- temp3$Row.names
temp3 <- temp3[,-1]
colnames(temp3) <- c('copd',paste0("pred_Fold_",seq(length(testSets))))
cvPreeByParam[[i]] <- temp3
}
View(cvPredByParam)
for (i in 1:length(cvPredByParam)){
for (ii in 1:length(testSets)){
testSamples <- testSets[[ii]]
predicted <- eval(parse(text = paste0("rf_",ii)))[[i]][['test']][['predicted']]
temp <- data.frame(predicted,row.names = testSamples)
if (ii ==1){
temp2 <- temp
}else{
temp2 <- merge.data.frame(temp2,temp,by = 0,all = TRUE)
row.names(temp2) <- temp2$Row.names
temp2 <- temp2[,-1]
colnames(temp2) <- 1:ncol(temp2)
}
}
temp3 <-  merge.data.frame(predictionDf,temp2,by = 0,all = TRUE)
row.names(temp3) <- temp3$Row.names
temp3 <- temp3[,-1]
colnames(temp3) <- c('copd',paste0("pred_Fold_",seq(length(testSets))))
cvPredByParam[[i]] <- temp3
}
View(cvPredByParam)
plot(cvPredByParam[[1]]$copd,cvPredByParam[[1]][,-1])
#-----------------------#
#   Loading libraries   #
#-----------------------#
packages <- c("ggplot2","randomForest","caret","dplyr","tidyr","parallel")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install(version = "3.13")
}
for (p in packages){
if (!require(p, character.only = TRUE)){
BiocManager::install(p,update = FALSE)
if(!require(p,character.only = TRUE)) {stop("Package not found")}
}
}
plotData <- pivot_longer(cvPredByParam[[1]],names_to = 'rownames')
View(cvPredByParam)
m <- rowMeans(cvPredByParam[[1]][,-1],na.rm = TRUE)
s <- apply(cvPredByParam[[1]][,-1],2,sd)
s <- apply(cvPredByParam[[1]][,-1],2,sd(x,na.rm = TRUE))
s <- apply(cvPredByParam[[1]][,-1],2,sd(na.rm = TRUE))
s <- apply(cvPredByParam[[1]][,-1],2,sd,na.rm = TRUE)
plotData <- data.frame(cvPredByParam[[1]][,1],m,s)
s <- apply(cvPredByParam[[1]][,-1],1,sd,na.rm = TRUE)
plotData <- data.frame(cvPredByParam[[1]][,1],m,s)
plot(m,cvPredByParam[[1]][,1])
39*0.8
9-2
5!
!(5)
r = 7
n = 39
factorial(r + n - 1)/(factorial(r)*factorial(n-1))
factorial(n)/(factorial(r)*factorial(n-1))
factorial(n)/(factorial(r)*factorial(n-r))
#----------------#
#   User input   #
#----------------#
#dat <- "data_change.csv"
dat <- "Data_Y_Y_minus_One.csv" #Which version of the cleaned dataset to be used
#------------------#
#   Loading data   #
#------------------#
data <- read.csv(dat)
data <- data[,-1]
trainSets <- caret::groupKFold(group = data$country,k = 39)
#-----------------------#
#   Loading libraries   #
#-----------------------#
packages <- c("ggplot2","randomForest","caret","dplyr","tidyr","parallel")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install(version = "3.13")
}
for (p in packages){
if (!require(p, character.only = TRUE)){
BiocManager::install(p,update = FALSE)
if(!require(p,character.only = TRUE)) {stop("Package not found")}
}
}
#----------------#
#   User input   #
#----------------#
#dat <- "data_change.csv"
dat <- "Data_Y_Y_minus_One.csv" #Which version of the cleaned dataset to be used
#-----------------------#
#   Loading libraries   #
#-----------------------#
packages <- c("ggplot2","randomForest","caret","dplyr","tidyr","parallel")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install(version = "3.13")
}
for (p in packages){
if (!require(p, character.only = TRUE)){
BiocManager::install(p,update = FALSE)
if(!require(p,character.only = TRUE)) {stop("Package not found")}
}
}
#------------------#
#   Loading data   #
#------------------#
data <- read.csv(dat)
data <- data[,-1]
#--------------#
#   Analysis   #
#--------------#
set.seed(2021)
#Training and test set
param.mtry <- c(round((ncol(data)-2)/9),
round((ncol(data)-2)/3),
round((ncol(data)-2)/1.5))
param.nodesize <- c(3,5,7)
param.maxnodes <- c(0,10,100)
param <- expand.grid(param.mtry,param.nodesize,param.maxnodes)
param <- split(param,1:nrow(param))
trainSets <- caret::groupKFold(group = data$country,k = 39,list = FALSE)
View(trainSets)
###############################
trainSets <- vector("list",50)
trainSets <- lapply(trainSets, groupKFold,group = data$country,k = 39)
trainSets <- lapply(trainSets, groupKFold,group = data$country,k = 39)
###############################
trainSets <- vector("list",50)
for (i in 1:50){
trainSets[[i]] <- caret::groupKFold(group = data$country,k = 39)
}
View(trainSets)
test <- Reduce(trainSets)
test <- Reduce(merge,trainSets)
test <- do.call(c, trainSets)
View(test)
###############################
trainSets <- vector("list",50)
for (i in 1:50){
trainSets[[i]] <- caret::groupKFold(group = data$country,k = 39)
names(trainSets[[i]]) <- paste0("Run_","i","_Fold_",1:length(trainSets[[i]]))
}
View(trainSets)
###############################
trainSets <- vector("list",50)
for (i in 1:50){
trainSets[[i]] <- caret::groupKFold(group = data$country,k = 39)
names(trainSets[[i]]) <- paste0("Run_",i,"_Fold_",1:length(trainSets[[i]]))
}
View(trainSets)
test <- do.call(c, trainSets)
View(test)
testSets <- lapply(trainSets,function(trainSet){testSet <- setdiff(1:nrow(data),trainSet)})
xtest <- lapply(testSets,function(testSet){dat <- data[testSet,-c(1,11)]})
xtrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,-c(1,11)]})
ytest <- lapply(testSets,function(testSet){dat <- data[testSet,11]})
ytrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,11]})
View(trainSets)
#aggregating them for computation efficiency
trainSets <- do.call(c, trainSets)
testSets <- lapply(trainSets,function(trainSet){testSet <- setdiff(1:nrow(data),trainSet)})
xtest <- lapply(testSets,function(testSet){dat <- data[testSet,-c(1,11)]})
xtrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,-c(1,11)]})
ytest <- lapply(testSets,function(testSet){dat <- data[testSet,11]})
ytrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,11]})
RF_data <- lapply(trainSets,function(trainSet){
fold <- vector("list",6)
fold[[1]] <- trainSet
fold[[2]] <- setdiff(1:nrow(data),trainSet)
fold[[3]] <- data[testSet,-c(1,11)]
fold[[4]] <- data[trainSet,-c(1,11)]
fold[[5]] <- data[testSet,11]
fold[[6]] <- data[trainSet,11]
return(fold)
})
RF_data <- lapply(trainSets,function(trainSet){
fold <- vector("list",6)
fold[[1]] <- trainSet
fold[[2]] <- setdiff(1:nrow(data),trainSet)
fold[[3]] <- data[-trainSet,-c(1,11)]
fold[[4]] <- data[trainSet,-c(1,11)]
fold[[5]] <- data[-trainSet,11]
fold[[6]] <- data[trainSet,11]
return(fold)
})
View(RF_data)
is.data.frame(RF_data[[1]][[3]])
RFdata <- lapply(trainSets,function(trainSet){
fold <- vector("list",6)
fold[[1]] <- trainSet
fold[[2]] <- setdiff(1:nrow(data),trainSet)
fold[[3]] <- data[-trainSet,-c(1,11)]
fold[[4]] <- data[trainSet,-c(1,11)]
fold[[5]] <- data[-trainSet,11]
fold[[6]] <- data[trainSet,11]
return(fold)
})
View(param)
param.mtry <- c(round((ncol(data)-2)/9),
round((ncol(data)-2)/3),
round((ncol(data)-2)/1.5))
param.nodesize <- c(3,5,7)
param.maxnodes <- c(0,10,100)
param <- expand.grid(param.mtry,param.nodesize,param.maxnodes)
View(param)
nRun <- 5 #Number of separate runs
trainSets <- vector("list",nRun)
for (i in 1:nRun){
trainSets[[i]] <- caret::groupKFold(group = data$country,k = 39)
names(trainSets[[i]]) <- paste0("Run_",i,"_Fold_",1:length(trainSets[[i]]))
}
trainSets <- do.call(c, trainSets)
# testSets <- lapply(trainSets,function(trainSet){testSet <- setdiff(1:nrow(data),trainSet)})
#
# xtest <- lapply(testSets,function(testSet){dat <- data[testSet,-c(1,11)]})
# xtrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,-c(1,11)]})
# ytest <- lapply(testSets,function(testSet){dat <- data[testSet,11]})
# ytrain <- lapply(trainSets,function(trainSet){dat <- data[trainSet,11]})
RFdata <- lapply(trainSets,function(trainSet){
fold <- vector("list",6)
fold[[1]] <- trainSet
fold[[2]] <- setdiff(1:nrow(data),trainSet)
fold[[3]] <- data[-trainSet,-c(1,11)]
fold[[4]] <- data[trainSet,-c(1,11)]
fold[[5]] <- data[-trainSet,11]
fold[[6]] <- data[trainSet,11]
return(fold)
})
View(RF_data)
for (i in 1:nrow(param)){
mtry <- as.numeric(param[i,1])
nodesize <- as.numeric(param[i,2])
if (param[i,3] == 0){maxnodes <- NULL}
else{maxnodes <- param[i,3]}
coreNum <- parallel::detectCores()
clust <- parallel::makeCluster(coreNum-1)
clusterExport(cl = clust,varlist = c("mtry","nodesize","maxnodes"))
rf <- parlapply(cl = clust,RFdata,function(fold){
xtest <- fold[[3]]
xtrain <- fold[[4]]
ytest <- fold[[5]]
ytrain <- fold[[6]]
res <- randomForest::randomForest(x = xtrain,y = ytrain,
xtest = xtest,ytest = ytest,
mtry = mtry,nodesize = nodesize,maxnodes = maxnodes,
keep.forest = TRUE,ntree = 500)
return(res)
})
stopCluster(cl = clust)
assign(paste0('rf_',i),rf,pos = .GlobalEnv)
}
stopCluster(cl = clust)
for (i in 1:nrow(param)){
mtry <- as.numeric(param[i,1])
nodesize <- as.numeric(param[i,2])
if (param[i,3] == 0){maxnodes <- NULL}
else{maxnodes <- param[i,3]}
coreNum <- parallel::detectCores()
clust <- parallel::makeCluster(coreNum-1)
clusterExport(cl = clust,varlist = c("mtry","nodesize","maxnodes"))
rf <- parLapply(cl = clust,RFdata,function(fold){
xtest <- fold[[3]]
xtrain <- fold[[4]]
ytest <- fold[[5]]
ytrain <- fold[[6]]
res <- randomForest::randomForest(x = xtrain,y = ytrain,
xtest = xtest,ytest = ytest,
mtry = mtry,nodesize = nodesize,maxnodes = maxnodes,
keep.forest = TRUE,ntree = 500)
return(res)
})
stopCluster(cl = clust)
assign(paste0('rf_',i),rf,pos = .GlobalEnv)
}
View(rf_2)
print('test')
