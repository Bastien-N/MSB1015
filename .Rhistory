for (i in c(1:6,8)){
datasets[[i]] <- datasets[[i]][,-c(30)]
}
#Checking missing values per country again
enoughDataCountries <- vector("list",8)
names(enoughDataCountries) <- names(datasets)[-9]
for (i in 1:8){
Na30p <- is.na.data.frame(datasets[[i]])
Na30p <- apply(Na30p[,-1],1,function(x){
sum(x) / length(x)
})
enoughDataCountries[[i]] <- datasets[[i]][Na30p < 0.3,1]
}
commonCountries <- Reduce(intersect,enoughDataCountries)
#Removing unusable countries and cleaning variable names and
#data type for the environment data, reorganizing data
datasetsClean <- lapply(datasets[-9], function(x){
dat <- x[x[,1] %in% commonCountries,]
colnames(dat) <-  c("country",1990:2017)
dat[,2:ncol(dat)] <- apply(dat[,2:ncol(dat)],2,function(x2){
x2 <- gsub(",","",x2)
x2 <- as.numeric(x2)
})
dat <- pivot_longer(dat,cols = -1,names_to = "year", values_to = "Value")
dat$year <- as.numeric(dat$year)
return(dat)
})
#extracting needed GBD data
copdDailys <- gbd_extract(datasets[[9]],"DALYs (Disability-Adjusted Life Years)",
"Number","Chronic obstructive pulmonary disease",
commonCountries,
1990:2017)
datasetsClean[[9]] <- copdDailys
names(datasetsClean)[9] <- "copdDalys"
#Combining the data
Data <- data.frame(datasetsClean[[1]],datasetsClean[[2]][,3],
datasetsClean[[3]][,3],datasetsClean[[4]][,3],datasetsClean[[5]][,3],
datasetsClean[[6]][,3],datasetsClean[[7]][,3],datasetsClean[[8]][,3],
datasetsClean[[9]][,3])
colnames(Data)[-c(1,2)] <- names(datasetsClean)
# #check countries with too many missing values over too many variables
# rowWiseNa <- apply(naDat[,-c(1,2)],1,sum)
# missingDataCountries <- unique(naDat[(rowWiseNa / 9) > 0.3,1])
# Data <- Data[!(Data$country %in% missingDataCountries),]
#Removing all rows with missing values
naDat <- is.na.data.frame(Data)
naDat <- rowSums(naDat) == 0
Data <- Data[naDat,]
pcaDat <- Data[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(Data$country,1,2)
pcaRes <- data.frame(Data[,c(1,2)],pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = year)) +
geom_text(aes(label = substring))
#Transforming data into change (year-previous year)
countries <- unique(Data$country)
for (i in 1:length(countries)){
dataTemp <- Data[Data$country == countries[i],]
dataTemp2 <- dataTemp[-nrow(dataTemp),]
dataTemp <- dataTemp[-1,]
year <- paste0(dataTemp2$year,"_to_",dataTemp$year)
dataTemp3 <- as.data.frame(mapply('-',dataTemp[,-c(1,2)],dataTemp2[,-c(1,2)]))
dataTemp3 <- data.frame(rep(countries[i],nrow(dataTemp)),year,dataTemp3)
colnames(dataTemp3)[1] <- "country"
if (i == 1){
DataChange <- dataTemp3
}
else{
DataChange <- rbind(DataChange,dataTemp3)
}
}
pcaDat <- DataChange[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataChange$country,1,2)
pcaRes <- data.frame(DataChange,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC3,y = PC4,color = copdDalys)) +
geom_text(aes(label = substring))
#min-max Scaling
DataChange[,-c(1,2)] <- apply(DataChange[,-c(1,2)],2,function(x){
(x - min(x))/(max(x)-min(x))
})
pcaDat <- DataChange[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "none")
substring <- substr(DataChange$country,1,2)
pcaRes <- data.frame(DataChange[,c(1,2)],pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = country)) +
geom_text(aes(label = substring))
#Exploring relationship
for (var in colnames(DataChange)[-c(1,2,11)]){
plot(DataChange[,var],DataChange$copdDalys,xlab = var,ylab = "COPD Dalys")
}
#creating shifted data
dataShifted <- vector(mode = "list",5)
shifts <- 1:5
for (i in 1:length(shifts)){
for (ii in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[ii],]
predTemp <- dataTemp[-((nrow(dataTemp)-shifts[i]+1):nrow(dataTemp)),-ncol(dataTemp)]
critTemp <- dataTemp[-(1:shifts[i]),ncol(dataTemp)]
dataTemp <- data.frame(predTemp,critTemp)
if (ii == 1){
dataTemp2 <- dataTemp
}
else{
dataTemp2 <- rbind(dataTemp2,dataTemp)
}
}
dataShifted[[i]] <- dataTemp2
names(dataShifted)[i] <- paste0("YearMinus",shifts[i])
colnames(dataShifted[[i]])[11] <- "copdDalys"
}
for (var in colnames(dataShifted[[i]])[-c(1,2,11)]){
for (i in 1:length(dataShifted)){
plot(dataShifted[[i]][,var],dataShifted[[i]]$copdDalys,
main = names(dataShifted)[i],xlab = var,ylab = "COPD Dalys")
}
}
##Aggregating years:
#Per three years
dataTemp <- dataTemp2 <- dataTemp3 <- DataAggThree<- NULL
for (i in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[i],]
years <- unique(dataTemp$year)
for (ii in 1:9){
yearsTemp <- years[(1+(ii-1)*3):(ii*3)]
dataTemp2 <- dataTemp[dataTemp$year %in% yearsTemp,]
if (nrow(dataTemp2) == 3){
dataTemp2 <- data.frame(dataTemp2[1,1],
paste0(substr(yearsTemp[1],1,4),'_to_',substr(yearsTemp[3],1,4)),
t(colSums(dataTemp2[,-c(1,2)])))
colnames(dataTemp2) <- colnames(DataChange)
if (ii == 1){
dataTemp3 <- dataTemp2
}
else{
dataTemp3 <- rbind(dataTemp3,dataTemp2)
}
}
}
if (i == 1){DataAggThree <- dataTemp3}
else{DataAggThree <- rbind(DataAggThree,dataTemp3)}
}
#PCA
pcaDat <- DataAggThree[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataAggThree$country,1,2)
pcaRes <- data.frame(DataAggThree,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
#Exploring relationship
for (var in colnames(DataAggThree)[-c(1,2,11)]){
plot(DataAggThree[,var],DataAggThree$copdDalys,xlab = var,ylab = "COPD Dalys")
}
##Aggregating years:
#Per nine years
dataTemp <- dataTemp2 <- dataTemp3 <- DataAggNine<- NULL
for (i in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[i],]
years <- unique(dataTemp$year)
for (ii in 1:3){
yearsTemp <- years[(1+(ii-1)*9):(ii*9)]
dataTemp2 <- dataTemp[dataTemp$year %in% yearsTemp,]
if (nrow(dataTemp2) == 9){
dataTemp2 <- data.frame(dataTemp2[1,1],
paste0(substr(yearsTemp[1],1,4),'_to_',substr(yearsTemp[3],1,4)),
t(colSums(dataTemp2[,-c(1,2)])))
colnames(dataTemp2) <- colnames(DataChange)
if (ii == 1){
dataTemp3 <- dataTemp2
}
else{
dataTemp3 <- rbind(dataTemp3,dataTemp2)
}
}
}
if (i == 1){DataAggNine <- dataTemp3}
else{DataAggNine <- rbind(DataAggNine,dataTemp3)}
}
#PCA
pcaDat <- DataAggNine[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataAggNine$country,1,2)
pcaRes <- data.frame(DataAggNine,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
#Exploring relationship
for (var in colnames(DataAggNine)[-c(1,2,11)]){
plot(DataAggNine[,var],DataAggNine$copdDalys,xlab = var,ylab = "COPD Dalys")
}
for (i in 1:length(countries)){
dataTemp <- Data[Data$country == countries[i],]
dataTemp2 <- dataTemp[-nrow(dataTemp),]
dataTemp <- dataTemp[-1,]
year <- paste0(dataTemp2$year,"_to_",dataTemp$year)
dataTemp3 <- as.data.frame(mapply('-',dataTemp[,-c(1,2)],dataTemp2[,-c(1,2)]))
dataTemp3 <- data.frame(rep(countries[i],nrow(dataTemp)),year,dataTemp3)
colnames(dataTemp3)[1] <- "country"
if (i == 1){
DataChange <- dataTemp3
}
else{
DataChange <- rbind(DataChange,dataTemp3)
}
}
#creating shifted data
dataShifted <- vector(mode = "list",5)
shifts <- 1:5
for (i in 1:length(shifts)){
for (ii in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[ii],]
predTemp <- dataTemp[-((nrow(dataTemp)-shifts[i]+1):nrow(dataTemp)),-ncol(dataTemp)]
critTemp <- dataTemp[-(1:shifts[i]),ncol(dataTemp)]
dataTemp <- data.frame(predTemp,critTemp)
if (ii == 1){
dataTemp2 <- dataTemp
}
else{
dataTemp2 <- rbind(dataTemp2,dataTemp)
}
}
dataShifted[[i]] <- dataTemp2
names(dataShifted)[i] <- paste0("YearMinus",shifts[i])
colnames(dataShifted[[i]])[11] <- "copdDalys"
}
for (var in colnames(dataShifted[[i]])[-c(1,2,11)]){
for (i in 1:length(dataShifted)){
plot(dataShifted[[i]][,var],dataShifted[[i]]$copdDalys,
main = names(dataShifted)[i],xlab = var,ylab = "COPD Dalys")
}
}
##Aggregating years:
#Per three years
dataTemp <- dataTemp2 <- dataTemp3 <- DataAggThree<- NULL
for (i in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[i],]
years <- unique(dataTemp$year)
for (ii in 1:9){
yearsTemp <- years[(1+(ii-1)*3):(ii*3)]
dataTemp2 <- dataTemp[dataTemp$year %in% yearsTemp,]
if (nrow(dataTemp2) == 3){
dataTemp2 <- data.frame(dataTemp2[1,1],
paste0(substr(yearsTemp[1],1,4),'_to_',substr(yearsTemp[3],1,4)),
t(colSums(dataTemp2[,-c(1,2)])))
colnames(dataTemp2) <- colnames(DataChange)
if (ii == 1){
dataTemp3 <- dataTemp2
}
else{
dataTemp3 <- rbind(dataTemp3,dataTemp2)
}
}
}
if (i == 1){DataAggThree <- dataTemp3}
else{DataAggThree <- rbind(DataAggThree,dataTemp3)}
}
#PCA
pcaDat <- DataAggThree[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataAggThree$country,1,2)
pcaRes <- data.frame(DataAggThree,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
#Exploring relationship
for (var in colnames(DataAggThree)[-c(1,2,11)]){
plot(DataAggThree[,var],DataAggThree$copdDalys,xlab = var,ylab = "COPD Dalys")
}
##Aggregating years:
#Per nine years
dataTemp <- dataTemp2 <- dataTemp3 <- DataAggNine<- NULL
for (i in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[i],]
years <- unique(dataTemp$year)
for (ii in 1:3){
yearsTemp <- years[(1+(ii-1)*9):(ii*9)]
dataTemp2 <- dataTemp[dataTemp$year %in% yearsTemp,]
if (nrow(dataTemp2) == 9){
dataTemp2 <- data.frame(dataTemp2[1,1],
paste0(substr(yearsTemp[1],1,4),'_to_',substr(yearsTemp[3],1,4)),
t(colSums(dataTemp2[,-c(1,2)])))
colnames(dataTemp2) <- colnames(DataChange)
if (ii == 1){
dataTemp3 <- dataTemp2
}
else{
dataTemp3 <- rbind(dataTemp3,dataTemp2)
}
}
}
if (i == 1){DataAggNine <- dataTemp3}
else{DataAggNine <- rbind(DataAggNine,dataTemp3)}
}
#PCA
pcaDat <- DataAggNine[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataAggNine$country,1,2)
pcaRes <- data.frame(DataAggNine,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
#Exploring relationship
for (var in colnames(DataAggNine)[-c(1,2,11)]){
plot(DataAggNine[,var],DataAggNine$copdDalys,xlab = var,ylab = "COPD Dalys")
}
pcaDat <- DataChange[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataChange$country,1,2)
pcaRes <- data.frame(DataChange,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
ggplot(pcaRes,aes(x = PC3,y = PC4,color = copdDalys)) +
geom_text(aes(label = substring))
View(DataChange)
pcaDat <- DataChange[!DataChange$country== "Russian Federation",-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataChange$country,1,2)
pcaRes <- data.frame(DataChange,pcaDat@scores,substring)
pcaDat <- DataChange[!DataChange$country== "Russian Federation",-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataChange[!DataChange$country== "Russian Federation",]$country,1,2)
pcaRes <- data.frame(DataChange[!DataChange$country== "Russian Federation",],pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
ggplot(pcaRes,aes(x = PC3,y = PC4,color = copdDalys)) +
geom_text(aes(label = substring))
ggplot(pcaRes,aes(x = PC1,y = PC3,color = copdDalys)) +
geom_text(aes(label = substring))
ggplot(pcaRes,aes(x = PC1,y = PC4,color = copdDalys)) +
geom_text(aes(label = substring))
plotPcs(pcaDat)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = country)) +
geom_text(aes(label = substring))
Data <- Data[naDat,]
pcaDat <- Data[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(Data$country,1,2)
pcaRes <- data.frame(Data[,c(1,2)],pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = year)) +
geom_text(aes(label = substring))
ggplot(pcaRes,aes(x = PC3,y = PC4,color = year)) +
geom_text(aes(label = substring))
#PCA
pcaDat <- DataAggThree[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataAggThree$country,1,2)
pcaRes <- data.frame(DataAggThree,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
for (var in colnames(DataAggThree)[-c(1,2,11)]){
plot(DataAggThree[,var],DataAggThree$copdDalys,xlab = var,ylab = "COPD Dalys")
}
#Per nine years
dataTemp <- dataTemp2 <- dataTemp3 <- DataAggNine<- NULL
for (i in 1:length(countries)){
dataTemp <- DataChange[DataChange$country == countries[i],]
years <- unique(dataTemp$year)
for (ii in 1:3){
yearsTemp <- years[(1+(ii-1)*9):(ii*9)]
dataTemp2 <- dataTemp[dataTemp$year %in% yearsTemp,]
if (nrow(dataTemp2) == 9){
dataTemp2 <- data.frame(dataTemp2[1,1],
paste0(substr(yearsTemp[1],1,4),'_to_',substr(yearsTemp[3],1,4)),
t(colSums(dataTemp2[,-c(1,2)])))
colnames(dataTemp2) <- colnames(DataChange)
if (ii == 1){
dataTemp3 <- dataTemp2
}
else{
dataTemp3 <- rbind(dataTemp3,dataTemp2)
}
}
}
if (i == 1){DataAggNine <- dataTemp3}
else{DataAggNine <- rbind(DataAggNine,dataTemp3)}
}
#PCA
pcaDat <- DataAggNine[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataAggNine$country,1,2)
pcaRes <- data.frame(DataAggNine,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
#Exploring relationship
for (var in colnames(DataAggNine)[-c(1,2,11)]){
plot(DataAggNine[,var],DataAggNine$copdDalys,xlab = var,ylab = "COPD Dalys")
}
pcaDat <- DataChange[,-c(1,2)]
pcaDat <- pca(pcaDat,nPcs = 6,scale = "pareto")
substring <- substr(DataChange$country,1,2)
pcaRes <- data.frame(DataChange,pcaDat@scores,substring)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = country)) +
geom_text(aes(label = substring))
plotPcs(pcaDat)
ggplot(pcaRes,aes(x = PC1,y = PC2,color = copdDalys)) +
geom_text(aes(label = substring))
View(pcaDat)
#----------------#
#   User input   #
#----------------#
dat <- "data_change.csv" #Which version of the cleaned dataset to be used
#-----------------------#
#   Loading libraries   #
#-----------------------#
packages <- c("ggplot2","randomForest","caret")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install(version = "3.13")
}
for (p in packages){
if (!require(p, character.only = TRUE)){
BiocManager::install(p,update = FALSE)
if(!require(p,character.only = TRUE)) {stop("Package not found")}
}
}
#------------------#
#   Loading data   #
#------------------#
data <- read.csv(dat)
data <- data[,-1]
#--------------#
#   Analysis   #
#--------------#
#Training and test set
trainSets <- caret::groupKFold(group = data$country,k = 15)
View(trainSets)
rf <- lapply(trainSets,function(trainSet){
test <- data[-trainSet,]
train <- data[trainSet,]
res <- randomForest::randomForest(x = train[,-c(1,ncol(train))],y = train[,ncol(train)],
ntree = 10,keep.forest = TRUE)
return(res)
})
rfPred <- vector('list',length(rf))
for (i in 1:length(rf)){
rfPred[[i]] <- predict(rf[[i]],data[-trainSets[[i]],-1])
}
#----------------#
#   User input   #
#----------------#
dat <- "data_change.csv" #Which version of the cleaned dataset to be used
#-----------------------#
#   Loading libraries   #
#-----------------------#
packages <- c("ggplot2","randomForest","caret")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install(version = "3.13")
}
for (p in packages){
if (!require(p, character.only = TRUE)){
BiocManager::install(p,update = FALSE)
if(!require(p,character.only = TRUE)) {stop("Package not found")}
}
}
#------------------#
#   Loading data   #
#------------------#
data <- read.csv(dat)
data <- data[,-1]
View(data)
test <- randomForest(data[-c(1,11)],data[,11])
View(test)
View(data)
View(test)
View(data)
boxplot(test[[mse]])
boxplot(test[["mse"]])
plot(test[["predicted"]],data[,11])
plot(data[,11],test[["predicted"]])
test <- randomForest(data[-c(1,11)],data[,11],maxnodes = 200)
test <- randomForest(data[-c(1,11)],data[,11],maxnodes = 4)
test <- randomForest(data[-c(1,11)],data[,11],maxnodes = 300)
#Training and test set
param.mtry <- c(1,3,5)
param.nodesize <- c(3,5,7)
param.maxnodes <- c(NULL,10,100)
#-----------------------#
#   Loading libraries   #
#-----------------------#
packages <- c("ggplot2","randomForest","caret","dplyr")
if (!requireNamespace("BiocManager", quietly = TRUE)){
install.packages("BiocManager")
BiocManager::install(version = "3.13")
}
for (p in packages){
if (!require(p, character.only = TRUE)){
BiocManager::install(p,update = FALSE)
if(!require(p,character.only = TRUE)) {stop("Package not found")}
}
}
param <- expand.grid(param.mtry,param.nodesize,param.maxnodes)
View(param)
param.maxnodes <- c(0,10,100)
param <- expand.grid(param.mtry,param.nodesize,param.maxnodes)
trainSets <- caret::groupKFold(group = data$country,k = nrow(param))
View(trainSets)
trainSets <- caret::groupKFold(group = data$country,k = 30)
trainSets <- caret::groupKFold(group = data$country,k = length(unique(data$country)))
trainSets <- caret::groupKFold(group = data$country,k = 100)
trainSets <- caret::groupKFold(group = data$country,k = 39)
trainSets <- caret::groupKFold(group = data$country,k = 39)
trainSets <- caret::groupKFold(group = data$country,k = 39)
trainSets <- caret::groupKFold(group = data$country,k = 39)
trainSets <- caret::groupKFold(group = data$country,k = 39)
#--------------#
#   Analysis   #
#--------------#
set.seed(2021)
#Training and test set
param.mtry <- c(1,3,5)
param.nodesize <- c(3,5,7)
param.maxnodes <- c(0,10,100)
param <- expand.grid(param.mtry,param.nodesize,param.maxnodes)
trainSets <- caret::groupKFold(group = data$country,k = 39)
